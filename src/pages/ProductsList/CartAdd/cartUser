지금 문서는 REST API 형식에 맞춰서 통신 되는 데이터 구조 협의를 하기 위한 목적을 가지고 있어요
그래서 절대적인 것이 아니며, 아래에서 작성된 REST API 통신 규격 또한 개인의 주관이 개입된 문서 형식 이니까
언제든, json구조 등 백엔드와 프론트 모두 자유롭게 협의가 필요합니다
저는 백엔드라서 백엔드 입장 위주로 작성이 되었습니다 ;)
장바구니 [추가, 수정, 삭제] 3가지 기능이 있는데 모두 다른 구조로 작성이 되었습니다
혹시 json 구조에 위반이 된다면 과감한 수정 부탁드립니다
------------------------------------------------------------------------------------
1. 회원이 상품을 장바구니(cart)에 추가하는 경우
요청시
{
    "url"         : "[여기에 client에서 요청한(fork한) URL 주소를 적는다]" ,
    "message"     :
    {
        token       : "[로그인 성공시 받았던 token 입력하기, 문자열로 전달]",
        id          : [여기에 회원 아이디 전달, int로 전달 할 것],
        product_id  : [여기에 상품 아이디 전달, int로 전달 할 것],
    }
}
1-1. 상품이 장바구니(cart)에 성공적으로 담긴 경우
{
    "url"     : "[url]"
    "result"  : "SUCCESS",
    "status"  : 201,
    "message" : 
    {
        token           : "[user_token]"
        id              : "[user_id]"
        product_id      : "[product_id]",
        product_count   : [추가된 총 갯수],
    }
}
1-2. 상품의 재고부족으로 담기지 못한 경우
{
    "url"     : "[url]"
    "result"  : "fail"
    "status"  : 400
    "message" : "product_soldout"
}
1-4. 상품 정보가 잘못 전달된 경우(product_id가 존재하지 않은 id인 경우)
{
    "url"     : "[url]",
    "result"  : "fail",
    "status"  : 401,
    "message" : "invalid_product"
}
1-3. 세션이 만료된 유저인 경우
{
    "url"     : "[url]",
    "result"  : "fail",
    "status"  : 401,
    "message" : "invalid_user"
}
1-4. client측의 잘못된 요청으로 응답이 어려운 경우
{
    "url"     : "[url주소]"
    "result"  : "[KEYERROR/혹은 여러 오류가 붙은 이름들]",
    "status"  : 401,
    "message" : "INVALID REQUEST"
}    
2. 회원이 장바구니 내용물의 갯수를 수정한 경우
요청시
{
    "url"     : "[url주소]"
    "message" :
    {
        "id"          : [user_id],
        "product_id"  : [product_id],
        "add_count"   : [최종으로 수정될 카운트],
    }
}
2-1. 상품이 장바구니(cart)에 성공적으로 담긴 경우
{
    "result"  : 
        success
        [
            user : {
                token   : "[user_token]",
                id      : "[user_id]",
            
            },
            
            product : 
            {
                product_id : "[product_id]",
                product_count   : [최종 추가된 상품 갯수 int로],
                
            }
        ]
}
2-2. 상품의 재고부족으로 추가가 안되는 경우
{
    "result"  :
        fail 
        [
            message
            {
                "message" : "prodcut_soldout" ,
                "status"  : 401
            },
            user
            {
                token       : [token],
                id      : [user_id],
            },
            product
            {
                id  : [product_id],
                count       : [기존에 있던 갯수 int로], 
            }
        ]
}
2-2. 비유효한 유저가 추가한 경우
{
    "result"  :
        fail
        [
            {
                "message"     : "product-is-not-user-cart",
                "status"  : 400
            }
            
        ]
}
2-1. 장바구니에 담기지 않은 상품의 수량을 변경한 경우
{
    "result"  :
    fail
    [
        {
            "message"     : "product_not_in_cart",
            "status"  : 400
        }
        
    ]
}
3.  장바구니에 담긴 상품을 삭제한경우
요청시
{
    "url" : "[url]"
    "message" :
        success
        [
            user
            {
                "token"       : "[token]",
                "id"  : "[user_id]",
            },
            product
            {
                "id" : [prodcut_id]
            }
        ]
}
3-1. 성공적인 삭제
{
    "url"         : [url], 
    "message" : 
        success
        [
            user
            {
                "token"   : [token],
                "id"  : [user_id],
            }
        ],
    "status"  : 200 or 201?
        
}
3-2. 유효한 유저지만 장바구니에 없는 상품을 삭제한경우
{
    "url"     : [url],
    "message" : "INVALID_PRODUCT"
}
3-3. 비 유효한 유저
{
    "url"     : [url],
    "message" : "INVALID_USER",
    "status"  : 401
}
3-4  그 외 오류?
{
    "url"     : [url],
    "message" : "[KEYERROR/...]",
    "status"  : 401   
}
